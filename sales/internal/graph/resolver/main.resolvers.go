package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"strings"

	"github.com/suessflorian/pedlar/sales/internal/graph"
	"github.com/suessflorian/pedlar/sales/internal/graph/model"
	"github.com/suessflorian/pedlar/sales/internal/items"
	"github.com/suessflorian/pedlar/sales/pkg/keys"
	"github.com/suessflorian/pedlar/sales/pkg/model/paginate"
)

// Confirm is the resolver for the confirm field.
func (r *confirmCreateItemResolver) Confirm(ctx context.Context, obj *model.ConfirmCreateItem) (*items.Item, error) {
	return r.ItemsManager.CreateItem(ctx, *obj.Details)
}

// CreateItem is the resolver for the createItem field.
func (r *mutationResolver) CreateItem(ctx context.Context, input items.Details) (*model.ConfirmCreateItem, error) {
	if input.UnitScale == "" {
		input.UnitScale = items.Unit
	}

	if strings.TrimSpace(input.Description) == "" {
		input.Description = ""
	}

	// TODO: perform search for similar items
	return &model.ConfirmCreateItem{
		Similar: []*items.Item{},
		Details: &items.Details{
			Name:        input.Name,
			Description: input.Description,
			UnitScale:   input.UnitScale,
		},
	}, nil
}

// Items is the resolver for the items field.
func (r *queryResolver) Items(ctx context.Context, paginate *paginate.Paginate) ([]*items.Item, error) {
	return r.ItemsManager.SearchItems(ctx, &items.ItemSearch{
		Page: paginate,
	})
}

// Item is the resolver for the item field.
func (r *queryResolver) Item(ctx context.Context, id *keys.OpaqueID) (*items.Item, error) {
	return r.ItemsManager.GetItem(ctx, id)
}

// ConfirmCreateItem returns graph.ConfirmCreateItemResolver implementation.
func (r *Resolver) ConfirmCreateItem() graph.ConfirmCreateItemResolver {
	return &confirmCreateItemResolver{r}
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type confirmCreateItemResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
