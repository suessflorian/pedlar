package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/suessflorian/pedlar/sales/internal/graph"
	"github.com/suessflorian/pedlar/sales/internal/graph/model"
	"github.com/suessflorian/pedlar/sales/pkg/keys"
	"github.com/suessflorian/pedlar/sales/pkg/model/sale"
)

// CreateSale is the resolver for the createSale field.
func (r *mutationResolver) CreateSale(ctx context.Context, input model.NewSale) (*sale.Sale, error) {
	panic(fmt.Errorf("not implemented: CreateSale - createSale"))
}

// Sales is the resolver for the sales field.
func (r *queryResolver) Sales(ctx context.Context, paginate *model.PaginationInput) ([]*sale.Sale, error) {
	id := keys.OpaqueID{ID: 1}
	return []*sale.Sale{
		{
			ID:        id.WithCodec(r.Keys),
			LineItems: []sale.LineItem{
				// {
				// 	ID:        id.WithCodec(r.Keys),
				// 	ProductID: id.WithCodec(r.Keys),
				// 	Quantity:  100,
				// 	UnitPrice: 23,
				// },
				// {
				// 	ID:        id.WithCodec(r.Keys),
				// 	ProductID: id.WithCodec(r.Keys),
				// 	Quantity:  100,
				// 	UnitPrice: 23,
				// },
			},
		},
	}, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
